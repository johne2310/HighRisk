import{aF as H,f as g,h as y,aG as A,aH as T,aI as I,aJ as P,aK as S,aL as x,aM as B}from"./index-CSjNZ9aV.js";const G=H("survey",()=>{const s=g([]),u=g([]),o=g({totalAudits:0,highRiskCount:0,todayCount:0,highRiskPercentage:0}),i=g(!1),r=g(null);let n=null;const w=async()=>{const{data:t,error:e}=await A.rpc("get_today_audit_count");e?console.error("Error fetching today audit count",e):o.value.todayCount=t},k=async()=>{const{data:t,error:e}=await A.rpc("get_highrisk_audit_count");e?console.error("Error fetching high risk audits:",e):o.value.highRiskCount=t},R=async()=>{const{data:t,error:e}=await A.rpc("get_total_patient_audits_count");e?console.error("Error fetching audit count:",e):o.value.totalAudits=t},E=()=>{const t=o.value.totalAudits===0?0:o.value.highRiskCount/o.value.totalAudits*100;o.value.highRiskPercentage=Math.round(t),console.log("high riks %: ",o.value.highRiskPercentage)},p=y(()=>t=>s.value.find(e=>e.id===t)),m=y(()=>t=>s.value.filter(e=>e.hospital===t)),b=y(()=>t=>s.value.filter(e=>e.ward===t)),C=()=>{n&&n.unsubscribe(),n=T(t=>{console.log("Real-time update received:",t);const{eventType:e,new:a,old:d}=t;if(e==="INSERT")s.value=[a,...s.value],a.isHighRisk&&(u.value=[a,...u.value]),l();else if(e==="UPDATE"){const c=s.value.findIndex(f=>f.id===a.id);c!==-1&&(s.value[c]=a);const h=u.value.findIndex(f=>f.id===a.id);a.isHighRisk&&h===-1?u.value=[a,...u.value]:!a.isHighRisk&&h!==-1?u.value.splice(h,1):a.isHighRisk&&h!==-1&&(u.value[h]=a),l()}else e==="DELETE"&&(s.value=s.value.filter(c=>c.id!==d.id),u.value=u.value.filter(c=>c.id!==d.id),l())})},_=()=>{n&&(n.unsubscribe(),n=null)},v=async()=>{i.value=!0,r.value=null;try{const{data:t,error:e}=await I();if(e)throw e;s.value=t||[]}catch(t){console.error("Error fetching audits:",t),r.value=t.message||"Failed to fetch audits"}finally{i.value=!1}},F=async()=>{i.value=!0,r.value=null,console.log("running fetch high audit data: ");try{const{data:t,error:e}=await P();if(console.log("high risk audit data: ",t),e)throw e;u.value=t||[]}catch(t){console.error("Error fetching high risk audits:",t),r.value=t.message||"Failed to fetch high risk audits"}finally{i.value=!1}},l=async()=>{i.value=!0,r.value=null;try{await w(),await k(),await R(),await E()}catch(t){console.error("Error fetching stats:",t),r.value=t.message||"Failed to fetch stats"}finally{i.value=!1}};return{audits:s,stats:o,loading:i,error:r,highRiskAudits:u,getAuditById:p,getAuditsByHospital:m,getAuditsByWard:b,fetchAudits:v,fetchHighRiskAudits:F,fetchStats:l,addAudit:async t=>{i.value=!0,r.value=null;try{const{data:e,error:a}=await S(t);if(a)throw a;return await v(),await l(),{success:!0,data:e}}catch(e){return console.error("Error adding audit:",e),r.value=e.message||"Failed to add audit",{success:!1,error:r.value}}finally{i.value=!1}},editAudit:async(t,e)=>{i.value=!0,r.value=null;try{const{data:a,error:d}=await x(t,e);if(d)throw d;return await v(),await l(),{success:!0,data:a}}catch(a){return console.error("Error updating audit:",a),r.value=a.message||"Failed to update audit",{success:!1,error:r.value}}finally{i.value=!1}},removeAudit:async t=>{i.value=!0,r.value=null;try{const{error:e}=await B(t);if(e)throw e;return await v(),await l(),{success:!0}}catch(e){return console.error("Error deleting audit:",e),r.value=e.message||"Failed to delete audit",{success:!1,error:r.value}}finally{i.value=!1}},subscribeToRealtimeUpdates:C,unsubscribeFromRealtimeUpdates:_,getTodayAuditCount:w,getHighRiskAuditsFromStats:k,getAuditCount:R,highRiskPercentage:E}});export{G as u};
