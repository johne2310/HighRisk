import{aF as k,f as v,h as g,aG as F,aH as H,aI as T,aJ as I,aK as S,aL as x,aM as B,aN as C}from"./index-DwViWMxj.js";const N=k("survey",()=>{const i=v([]),u=v([]),y=v({totalAudits:0,highRiskCount:0,todayCount:0,highRiskPercentage:0}),s=v(!1),r=v(null);let o=null;const A=async()=>{const{data:e,err:t}=await F.rpc("get_today_audit_count");t?console.error("Error fetching today audit count:",t):console.log("Audits today:",e)},w=g(()=>e=>i.value.find(t=>t.id===e)),E=g(()=>e=>i.value.filter(t=>t.hospital===e)),p=g(()=>e=>i.value.filter(t=>t.ward===e)),R=()=>{o&&o.unsubscribe(),o=H(e=>{console.log("Real-time update received:",e);const{eventType:t,new:a,old:n}=e;if(t==="INSERT")i.value=[a,...i.value],a.isHighRisk&&(u.value=[a,...u.value]),l();else if(t==="UPDATE"){const d=i.value.findIndex(h=>h.id===a.id);d!==-1&&(i.value[d]=a);const c=u.value.findIndex(h=>h.id===a.id);a.isHighRisk&&c===-1?u.value=[a,...u.value]:!a.isHighRisk&&c!==-1?u.value.splice(c,1):a.isHighRisk&&c!==-1&&(u.value[c]=a),l()}else t==="DELETE"&&(i.value=i.value.filter(d=>d.id!==n.id),u.value=u.value.filter(d=>d.id!==n.id),l())})},m=()=>{o&&(o.unsubscribe(),o=null)},f=async()=>{s.value=!0,r.value=null;try{const{data:e,error:t}=await T();if(t)throw t;i.value=e||[]}catch(e){console.error("Error fetching audits:",e),r.value=e.message||"Failed to fetch audits"}finally{s.value=!1}},b=async()=>{s.value=!0,r.value=null;try{const{data:e,error:t}=await I();if(t)throw t;u.value=e||[]}catch(e){console.error("Error fetching high risk audits:",e),r.value=e.message||"Failed to fetch high risk audits"}finally{s.value=!1}},l=async()=>{s.value=!0,r.value=null;try{const e=await S();y.value=e}catch(e){console.error("Error fetching stats:",e),r.value=e.message||"Failed to fetch stats"}finally{s.value=!1}};return{audits:i,highRiskAudits:u,stats:y,loading:s,error:r,getAuditById:w,getAuditsByHospital:E,getAuditsByWard:p,fetchAudits:f,fetchHighRiskAudits:b,fetchStats:l,addAudit:async e=>{s.value=!0,r.value=null;try{const{data:t,error:a}=await x(e);if(a)throw a;return await f(),await l(),{success:!0,data:t}}catch(t){return console.error("Error adding audit:",t),r.value=t.message||"Failed to add audit",{success:!1,error:r.value}}finally{s.value=!1}},editAudit:async(e,t)=>{s.value=!0,r.value=null;try{const{data:a,error:n}=await B(e,t);if(n)throw n;return await f(),await l(),{success:!0,data:a}}catch(a){return console.error("Error updating audit:",a),r.value=a.message||"Failed to update audit",{success:!1,error:r.value}}finally{s.value=!1}},removeAudit:async e=>{s.value=!0,r.value=null;try{const{error:t}=await C(e);if(t)throw t;return await f(),await l(),{success:!0}}catch(t){return console.error("Error deleting audit:",t),r.value=t.message||"Failed to delete audit",{success:!1,error:r.value}}finally{s.value=!1}},subscribeToRealtimeUpdates:R,unsubscribeFromRealtimeUpdates:m,getTodayAuditCount:A}});export{N as u};
