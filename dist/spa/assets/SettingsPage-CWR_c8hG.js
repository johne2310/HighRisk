import{am as _,f as m,h as w,_ as H,c as y,o as V,w as f,k as v,a as c,Q as U,j as B,l as C,a4 as p,aE as k,n as q,a0 as x,a1 as N}from"./index-DI-EJAwG.js";import{Q}from"./QSelect-Cn9WHjaz.js";import{Q as F}from"./QTooltip-PzP9TtGE.js";import{Q as D}from"./QForm-CXaxCVgy.js";import{Q as E}from"./QPage-DTJGE7IE.js";import{u as I}from"./use-quasar-C4Hcg6Ou.js";import{u as T}from"./settings-store-CdYiAhzi.js";import{s as W}from"./index-BIDZZdXi.js";import"./QItem-BBd7AGfM.js";const z=_("hospital",()=>{const g=m([]),d=m([]),u=m(!1),a=m(null),s=w(()=>e=>e?d.value.filter(o=>o.hospital_id===e):[]),S=w(()=>e=>g.value.find(o=>o.hospital_id===e)),r=w(()=>e=>d.value.find(o=>o.ward_id===e)),n=async()=>{u.value=!0,a.value=null;try{const{data:e,error:o}=await W.from("hospitals").select("*");if(o)throw o;return g.value=e||[],{success:!0,data:e}}catch(e){return console.error("Error fetching hospitals:",e),a.value=e.message||"Failed to fetch hospitals",{success:!1,error:a.value}}finally{u.value=!1}},h=async()=>{u.value=!0,a.value=null;try{const{data:e,error:o}=await W.from("wards").select("*");if(o)throw o;return d.value=e||[],{success:!0,data:e}}catch(e){return console.error("Error fetching wards:",e),a.value=e.message||"Failed to fetch wards",{success:!1,error:a.value}}finally{u.value=!1}};return{hospitals:g,wards:d,loading:u,error:a,getFilteredWards:s,getHospitalById:S,getWardById:r,fetchHospitals:n,fetchWards:h,initializeData:async()=>{await Promise.all([n(),h()])}}}),P={class:"row q-col-gutter-md"},A={class:"col-12 col-md-6"},X={__name:"SettingsPage",setup(g){const d=I(),u=T(),a=z(),{userSettings:s,appSettings:S}=u,r=m(null),n=m(null),h=w(()=>a.getFilteredWards(r.value));function b(){if(n.value=null,console.log("Selected hospital ID:",r.value),r.value){const l=a.getHospitalById(r.value);console.log("Hospital change details:",l),l&&(s.defaultHospital=l.hospital)}}function e(){if(n.value){const l=a.getWardById(n.value);l&&(console.log("Ward being change: ",l),s.defaultWard=l.ward)}}H(async()=>{await a.initializeData(),console.log("hospital store: ",a.hospitals),console.log("ward store: ",a.wards),setTimeout(()=>{if(s.defaultHospital){const l=a.hospitals.find(t=>t.hospital===s.defaultHospital);l&&(r.value=l.hospital_id)}if(s.defaultWard){const l=a.wards.find(t=>t.ward===s.defaultWard);l&&(n.value=l.ward_id)}},500)});const o=()=>{const l=u.saveUserSettings();l.success?d.notify({color:"positive",icon:"check_circle",message:"User settings saved successfully",position:"top",timeout:2e3}):d.notify({color:"negative",icon:"error",message:`Failed to save user settings: ${l.error}`,position:"top",timeout:2e3})};return(l,t)=>(V(),y(E,{padding:""},{default:f(()=>[t[6]||(t[6]=v("div",{class:"text-h4 text-primary q-mb-md"},"Application Settings",-1)),v("div",P,[v("div",A,[c(U,null,{default:f(()=>[c(B,null,{default:f(()=>[t[5]||(t[5]=v("div",{class:"text-h6"},"User Settings",-1)),c(D,{class:"q-gutter-md q-mt-md"},{default:f(()=>[c(C,{filled:"",modelValue:p(s).defaultName,"onUpdate:modelValue":t[0]||(t[0]=i=>p(s).defaultName=i),label:"Default Collector Name"},null,8,["modelValue"]),c(Q,{filled:"",modelValue:r.value,"onUpdate:modelValue":[t[1]||(t[1]=i=>r.value=i),b],options:p(a).hospitals,label:"Select Hospital","option-label":"hospital","option-value":"hospital_id","map-options":"","emit-value":"",rules:[i=>!!i||"Hospital selection is required"]},null,8,["modelValue","options","rules"]),(V(),y(Q,{filled:"",modelValue:n.value,"onUpdate:modelValue":[t[2]||(t[2]=i=>n.value=i),e],options:h.value,label:"Select Ward","option-label":"ward","option-value":"ward_id","map-options":"","emit-value":"",rules:[i=>!!i||"Ward selection is required"],disable:!r.value,key:"ward-select-"+(r.value||"none")},null,8,["modelValue","options","rules","disable"])),c(k,{modelValue:p(s).autoSave,"onUpdate:modelValue":t[3]||(t[3]=i=>p(s).autoSave=i),label:"Auto save settings"},null,8,["modelValue"]),v("div",null,[c(q,{color:"primary",label:"Save User Settings",onClick:o,disable:p(s).autoSave},{default:f(()=>[p(S).autoSave?(V(),y(F,{key:0},{default:f(()=>t[4]||(t[4]=[N(" Settings are automatically saved when auto-save is enabled ")])),_:1})):x("",!0)]),_:1},8,["disable"])])]),_:1})]),_:1})]),_:1})])])]),_:1}))}};export{X as default};
